$LOAD_PATH << File.join(File.dirname(__FILE__))
require 'rake'
require 'logger'
require 'git_helper'
require 'tsuru_api_client'
require 'tsuru_api_service'
require 'tsuru_deploy_client'

APPS = [
  {
    app: "example-java-jetty",
    repo: "https://github.com/alphagov/example-java-jetty"
  },
  {
    app: "flask-sqlalchemy-postgres-heroku-example",
    repo: "https://github.com/alphagov/flask-sqlalchemy-postgres-heroku-example"
  },
  {
    app: "digitalmarketplace-api",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-api"
  },
  {
    app: "digitalmarketplace-search-api",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-search-api"
  },
  {
    app: "digitalmarketplace-supplier-frontend",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-supplier-frontend"
  },
  {
    app: "digitalmarketplace-buyer-frontend",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-buyer-frontend"
  },
  {
    app: "digitalmarketplace-admin-frontend",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-admin-frontend"
  }
]

WORKING_DIR = ENV["workdir"] || "/tmp/workdir"
REPOS_DIR = File.join(WORKING_DIR, "repos")
VERBOSE = ENV["verbose"] || false
LOGGER = Logger.new(STDOUT)
LOGGER.level = Logger::INFO

TSURU_HOME=WORKING_DIR

ADMIN_USER = ENV["admin_user"] || 'administrator@gds.tsuru.gov'
ADMIN_PASS = ENV["admin_pass"] || raise("Must pass admin_pass=...")

UNITS_PER_APP = ENV["units_per_app"] || 3
ENVIRONMENT = ENV['environment'] || raise("Must pass environment=...")
TSURU_HOST = ENV['host'] || raise("Must pass host=...")

API_CLIENT = TsuruAPIClient.new(
  logger: LOGGER,
  environment: ENVIRONMENT,
  host: TSURU_HOST
)

API_SERVICE = TsuruAPIService.new(
  logger: LOGGER,
  api_client: API_CLIENT,
  tsuru_home: TSURU_HOME
)

DEPLOY_CLIENT = TsuruDeployClient.new(
  api_client: API_CLIENT,
  logger: LOGGER,
  environment: ENVIRONMENT,
  host: TSURU_HOST,
  tsuru_home: TSURU_HOME
)

task :debug do
  LOGGER.level = Logger::DEBUG
end


namespace :workdir do
  task :create_workdir do
    FileUtils.mkdir_p WORKING_DIR
  end
  task :clean do
    FileUtils.rm_rf WORKING_DIR
  end
end

namespace :clone do |ns|
  APPS.each { |entry|
    task "clone_#{entry[:app]}" do |t|
      repo_dir = File.join(REPOS_DIR, entry[:app])
      git_command = GitCommandLine.new(repo_dir, {}, { :verbose => VERBOSE })
      if (File.directory?(repo_dir))
        LOGGER.debug "#{t}: Updating #{entry[:repo]} in #{repo_dir}"
        git_command.pull
        raise git_command.stdouterr if git_command.exit_status != 0
      else
        LOGGER.debug "#{t}: Cloning #{entry[:repo]} in #{repo_dir}"
        git_command.clone(entry[:repo])
        raise git_command.stdouterr if git_command.exit_status != 0
      end
    end
  }
  multitask :all => ns.tasks do
    LOGGER.info "All repos cloned and updated."
  end
end

namespace :tsuru do
  task :login_admin do
    API_CLIENT.login('administrator@gds.tsuru.gov', ADMIN_PASS)
  end
end

def gen_team_name(index)
  "bulkt#{index}"
end

def gen_username(teamname, index)
  "user#{index}@#{teamname}.site.com"
end

def gen_user_hash(teamname, index)
  username = gen_username(teamname, 1)
  {
    email: username,
    password: "password",
    team: teamname,
    ssh_wrapper: ssh_wrapper_for_user(username)
  }
end

def ssh_wrapper_for_user(username)
  File.join(WORKING_DIR, "#{username}-ssh-wrapper")
end

NUM_TEAMS=1
NUM_USERS=10
namespace :teams do |ns|
  (1..NUM_TEAMS).each { |team_i|
    teamname = gen_team_name(team_i)
    namespace teamname do
      namespace_name = "teams:#{teamname}" # I did not find a better way
      namespace :users do |ns|
        (1..NUM_USERS).each { |user_i|
          username=gen_username(teamname, user_i)
          namespace username do
            task :create => [ "tsuru:login_admin" ] do
              LOGGER.info("Create user #{username}")
              API_SERVICE.create_user(username, "password", teamname)
              user = {
                email: username,
                password: "password",
                team: teamname,
                ssh_wrapper: ssh_wrapper_for_user(username)
              }
              API_SERVICE.add_key_to_user(user)
            end
            task :remove => [ "tsuru:login_admin" ] do
              LOGGER.info("Remove user #{username}")
              API_CLIENT.remove_user(username)
            end
          end
        }
        multitask :create_all => ns.tasks.select{|x| x.to_s.end_with? "create"}
        multitask :remove_all => ns.tasks.select{|x| x.to_s.end_with? "remove"}
      end
      task :create => [ "tsuru:login_admin" ] do |t|
        LOGGER.info("Create team #{teamname}")
        API_SERVICE.create_team(teamname)
        ns["#{namespace_name}:users:create_all"].invoke
      end
      task :remove => [ "tsuru:login_admin", ns["#{namespace_name}:users:remove_all" ] ] do
        LOGGER.info("Remove team #{teamname}")
        API_SERVICE.remove_team(teamname)
      end
    end
  }
  multitask :create_all => ns.tasks.select{|x| x.to_s =~ /teams:[^:]*:create/ }
  multitask :remove_all => ns.tasks.select{|x| x.to_s =~ /teams:[^:]*:remove/}
end

namespace "apps" do
  namespace "flask-app" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = gen_team_name(team_i)
      username=gen_username(teamname, 1)
      appname = "flask-app-#{teamname}"
      servicename = "db-#{appname}"
      namespace teamname do
        task "deploy" => [ "tsuru:login_admin" ] do
          LOGGER.info("Deploying #{appname} with service #{servicename}")
          DEPLOY_CLIENT.deploy_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "flask-sqlalchemy-postgres-heroku-example"),
              platform: "python"
            },
            postgres: servicename,
            git: true,
            units: UNITS_PER_APP
          )
        end
        task "remove" => [ "tsuru:login_admin" ] do
          DEPLOY_CLIENT.remove_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "flask-sqlalchemy-postgres-heroku-example"),
              platform: "python"
            },
            postgres: servicename
          )
        end
      end
    }
  end
  namespace "java-app" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = gen_team_name(team_i)
      appname = "java-app-#{teamname}"
      namespace teamname do
        task "deploy" => [ "tsuru:login_admin" ] do
          LOGGER.info("Deploying #{appname}")
          DEPLOY_CLIENT.deploy_app(
            user: gen_user_hash(teamname, 2),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "example-java-jetty"),
              platform: "java"
            },
            units: UNITS_PER_APP
          )
        end
        task "remove" => [ "tsuru:login_admin" ] do
          DEPLOY_CLIENT.remove_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
            }
          )
        end
      end
    }
  end
  namespace "dm-api" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = gen_team_name(team_i)
      appname = "dm-api-#{teamname}"
      servicename = "db-#{appname}"
      namespace teamname do
        task "deploy" => [ "tsuru:login_admin" ] do
          LOGGER.info("Deploying #{appname}")
          api_token = "ourtoken"
          search_api_token = "oursearchtoken"
          search_api_url = "https://preview-search-api.development.digitalmarketplace.service.gov.uk"
          DEPLOY_CLIENT.deploy_app(
            user: gen_user_hash(teamname, 3),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "digitalmarketplace-api"),
              platform: "python"
            },
            env_vars: {
              DM_API_AUTH_TOKENS: api_token,
              DM_SEARCH_API_AUTH_TOKEN: search_api_token,
              DM_SEARCH_API_URL: search_api_url,
            },
            postgres: servicename,
            units: UNITS_PER_APP
          )
        end
        task "remove" => [ "tsuru:login_admin" ] do
          DEPLOY_CLIENT.remove_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
            },
            postgres: servicename,
          )
        end
        task "import_pg_dump" do
          pg_dump_url= ENV['dm_api_pg_dump_url'] || raise("You must pass dm_api_pg_dump_url=... with the url to the db dump for DM API")
          pg_dump_auth_header= ENV['dm_api_pg_dump_auth_header'] || raise("You must pass dm_api_pg_dump_auth_header=... with the auth header to access to the db dump for DM API")

          DEPLOY_CLIENT.import_pg_dump_via_app(appname, pg_dump_url, pg_dump_auth_header)
        end

        task "import_pg_dump_via_ssh" => [ "apps:dm-api:upload_pg_dump" ] do
          postgres_ip = API_CLIENT.get_env_vars(appname)["PG_HOST"]
          db_name = API_CLIENT.get_env_vars(appname)["PG_DATABASE"]
          DEPLOY_CLIENT.import_pg_dump(POSTGRES_DB_IP, db_name)
        end
      end
    }
    task "upload_pg_dump_via_ssh" => [ "tsuru:login_admin" ] do
      # Get the IP from the postgresapi
      postgres_ip = API_CLIENT.get_env_vars('postgresapi')["POSTGRESAPI_SHARED_HOST"]
      DEPLOY_CLIENT.upload_pg_dump(POSTGRES_DB_IP)
    end
  end
  namespace "dm-supplier-frontend" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = gen_team_name(team_i)
      appname = "dm-supplier-frontend-#{teamname}"
      namespace teamname do
        task "deploy" => [ "tsuru:login_admin" ]  do
          LOGGER.info("Deploying #{appname}")
          api_token = "ourtoken"
          search_api_token = "oursearchtoken"
          api_url = "https://" + API_CLIENT.get_app_url("dm-api-#{teamname}")
          search_api_url = "https://preview-search-api.development.digitalmarketplace.service.gov.uk"
          DEPLOY_CLIENT.deploy_app(
            user: gen_user_hash(teamname, 5),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "digitalmarketplace-supplier-frontend"),
              platform: "python"
            },
            env_vars: {
              DM_ADMIN_FRONTEND_COOKIE_SECRET: "secret",
              DM_ADMIN_FRONTEND_PASSWORD_HASH: "JHA1azIkMjcxMCRiNWZmMjhmMmExYTM0OGMyYTY0MjA3ZWFkOTIwNGM3NiQ4OGRLTHBUTWJQUE95UEVvSmg3djZYY2tWQ3lpcTZtaw==",
              DM_DATA_API_AUTH_TOKEN: api_token,
              DM_DATA_API_URL: api_url,
              DM_MANDRILL_API_KEY: "somekey",
              DM_PASSWORD_SECRET_KEY: "verySecretKey",
              DM_S3_DOCUMENT_BUCKET: "admin-frontend-dev-documents",
              DM_SEARCH_API_AUTH_TOKEN: search_api_token,
              DM_SEARCH_API_URL: search_api_url
            },
            units: UNITS_PER_APP
          )
        end
        task "remove" => [ "tsuru:login_admin" ] do
          DEPLOY_CLIENT.remove_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
            }
          )
        end
      end
    }
  end
  namespace "dm-buyer-frontend" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = gen_team_name(team_i)
      appname = "dm-buyer-frontend-#{teamname}"
      namespace teamname do
        task "deploy" => [ "tsuru:login_admin" ]  do
          LOGGER.info("Deploying #{appname}")
          api_token = "ourtoken"
          search_api_token = "oursearchtoken"
          api_url = "https://" + API_CLIENT.get_app_url("dm-api-#{teamname}")
          search_api_url = "https://preview-search-api.development.digitalmarketplace.service.gov.uk"
          DEPLOY_CLIENT.deploy_app(
            user: gen_user_hash(teamname, 5),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "digitalmarketplace-buyer-frontend"),
              platform: "python"
            },
            env_vars: {
              DM_ADMIN_FRONTEND_COOKIE_SECRET: "secret",
              DM_ADMIN_FRONTEND_PASSWORD_HASH: "JHA1azIkMjcxMCRiNWZmMjhmMmExYTM0OGMyYTY0MjA3ZWFkOTIwNGM3NiQ4OGRLTHBUTWJQUE95UEVvSmg3djZYY2tWQ3lpcTZtaw==",
              DM_DATA_API_AUTH_TOKEN: api_token,
              DM_DATA_API_URL: api_url,
              DM_S3_DOCUMENT_BUCKET: "admin-frontend-dev-documents",
              DM_SEARCH_API_AUTH_TOKEN: search_api_token,
              DM_SEARCH_API_URL: search_api_url
            },
            units: UNITS_PER_APP
          )
        end
        task "remove" => [ "tsuru:login_admin" ] do
          DEPLOY_CLIENT.remove_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
            }
          )
        end
      end
    }
  end
  namespace "dm-admin-frontend" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = gen_team_name(team_i)
      appname = "dm-admin-frontend-#{teamname}"
      namespace teamname do
        task "deploy" => [ "tsuru:login_admin" ] do
          LOGGER.info("Deploying #{appname}")
          api_token = "ourtoken"
          search_api_token = "oursearchtoken"
          api_url = "https://" + API_CLIENT.get_app_url("dm-api-#{teamname}")
          search_api_url = "https://preview-search-api.development.digitalmarketplace.service.gov.uk"
          DEPLOY_CLIENT.deploy_app(
            user: gen_user_hash(teamname, 5),
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "digitalmarketplace-admin-frontend"),
              platform: "python"
            },
            env_vars: {
              DM_ADMIN_FRONTEND_COOKIE_SECRET: "secret",
              DM_ADMIN_FRONTEND_PASSWORD_HASH: "JHA1azIkMjcxMCRiNWZmMjhmMmExYTM0OGMyYTY0MjA3ZWFkOTIwNGM3NiQ4OGRLTHBUTWJQUE95UEVvSmg3djZYY2tWQ3lpcTZtaw==",
              DM_DATA_API_AUTH_TOKEN: api_token,
              DM_DATA_API_URL: api_url,
              DM_S3_DOCUMENT_BUCKET: "admin-frontend-dev-documents",
              DM_SEARCH_API_AUTH_TOKEN: search_api_token,
              DM_SEARCH_API_URL: search_api_url
            },
            units: UNITS_PER_APP
          )
        end
        task "remove" => [ "tsuru:login_admin" ] do
          DEPLOY_CLIENT.remove_app(
            user: gen_user_hash(teamname, 1),
            app: {
              name: appname,
            }
          )
        end
      end
    }
  end
end
