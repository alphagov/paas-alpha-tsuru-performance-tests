$LOAD_PATH << File.join(File.dirname(__FILE__))
require 'rake'
require 'logger'
require 'git_helper'
require 'tsuru_api_client'
require 'tsuru_api_service'
require 'tsuru_deploy_client'

APPS = [
  {
    app: "example-java-jetty",
    repo: "https://github.com/alphagov/example-java-jetty"
  },
  {
    app: "flask-sqlalchemy-postgres-heroku-example",
    repo: "https://github.com/alphagov/flask-sqlalchemy-postgres-heroku-example"
  },
  {
    app: "digitalmarketplace-api",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-api"
  },
  {
    app: "digitalmarketplace-search-api",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-search-api"
  },
  {
    app: "digitalmarketplace-supplier-frontend",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-supplier-frontend"
  },
  {
    app: "digitalmarketplace-buyer-frontend",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-buyer-frontend"
  },
  {
    app: "digitalmarketplace-admin-frontend",
    repo: "https://github.com/alphagov/multicloud-digitalmarketplace-admin-frontend"
  }
]

WORKING_DIR = ENV["workdir"] || "/tmp/workdir"
REPOS_DIR = File.join(WORKING_DIR, "repos")
VERBOSE = ENV["verbose"] || false
LOGGER = Logger.new(STDOUT)
LOGGER.level = Logger::INFO

TSURU_HOME=WORKING_DIR

ADMIN_USER = ENV["admin_user"] || 'administrator@gds.tsuru.gov'
ADMIN_PASS = ENV["admin_pass"] || raise("Must pass admin_pass=...")

UNITS_PER_APP = ENV["units_per_app"] || 3
ENVIRONMENT = ENV['environment'] || raise("Must pass environment=...")
TSURU_HOST = ENV['host'] || raise("Must pass host=...")

API_CLIENT = TsuruAPIClient.new(
  logger: LOGGER,
  environment: ENVIRONMENT,
  host: TSURU_HOST
)

API_SERVICE = TsuruAPIService.new(
  logger: LOGGER,
  api_client: API_CLIENT,
  tsuru_home: TSURU_HOME
)

DEPLOY_CLIENT = TsuruDeployClient.new(
  api_client: API_CLIENT,
  logger: LOGGER,
  environment: ENVIRONMENT,
  host: TSURU_HOST,
  tsuru_home: TSURU_HOME
)

task :debug do
  LOGGER.level = Logger::DEBUG
end


namespace :workdir do
  task :create_workdir do
    FileUtils.mkdir_p WORKING_DIR
  end
  task :clean do
    FileUtils.rm_rf WORKING_DIR
  end
end

namespace :clone do |ns|
  APPS.each { |entry|
    task "clone_#{entry[:app]}" do |t|

      repo_dir = File.join(REPOS_DIR, entry[:app])
      git_command = GitCommandLine.new(repo_dir, {}, { :verbose => VERBOSE })
      if (File.directory?(repo_dir))
        LOGGER.debug "#{t}: Updating #{entry[:repo]} in #{repo_dir}"
        git_command.pull
        raise git_command.stdouterr if git_command.exit_status != 0
      else
        LOGGER.debug "#{t}: Cloning #{entry[:repo]} in #{repo_dir}"
        git_command.clone(entry[:repo])
        raise git_command.stdouterr if git_command.exit_status != 0
      end
    end
  }
  multitask :all => ns.tasks do
    LOGGER.info "All repos cloned and updated."
  end
end

namespace :tsuru do
  task :login_admin do
    API_CLIENT.login('administrator@gds.tsuru.gov', ADMIN_PASS)
  end
end

NUM_TEAMS=1
NUM_USERS=10
namespace :teams do |ns|
  (1..NUM_TEAMS).each { |team_i|
    teamname = "bulkt#{team_i}"
    namespace teamname do
      namespace_name = "teams:#{teamname}" # I did not find a better way
      namespace :users do |ns|
        (1..NUM_USERS).each { |user_i|
          username="user#{user_i}@#{teamname}.site.com"
          namespace username do
            task :create => [ "tsuru:login_admin" ] do
              LOGGER.info("Create user #{username}")
              API_SERVICE.create_user(username, "password", teamname)
              user = {
                email: username,
                password: "password",
                team: teamname
              }
              API_SERVICE.add_key_to_user(user)
            end
            task :remove => [ "tsuru:login_admin" ] do
              puts "remove user #{username}"
              sleep 1
            end
          end
        }
        multitask :create_all => ns.tasks.select{|x| x.to_s.end_with? "create"}
        multitask :remove_all => ns.tasks.select{|x| x.to_s.end_with? "remove"}
      end
      task :create => [ "tsuru:login_admin" ] do |t|
        LOGGER.info("Create team #{teamname}")
        API_SERVICE.create_team(teamname)
        ns["#{namespace_name}:users:create_all"].invoke
      end
      task :remove => [ "tsuru:login_admin", ns["#{namespace_name}:users:remove_all" ] ] do
        puts "remove team #{team_i}"
      end
    end
  }
  multitask :create_all => ns.tasks.select{|x| x.to_s =~ /teams:[^:]*:create/ }
  multitask :remove_all => ns.tasks.select{|x| x.to_s =~ /teams:[^:]*:remove/}
end

namespace "apps" do
  namespace "flask-app" do
    (1..NUM_TEAMS).each { |team_i|
      teamname = "bulkt#{team_i}"
      appname = "flask-app-#{teamname}"
      servicename = "db-#{appname}"
      namespace teamname do
        LOGGER.info("Deploying #{appname} with service #{servicename}")
        task "deploy" => [ "tsuru:login_admin" ]  do
          username = "user1@#{teamname}.site.com"
          user = {
            email: username,
            password: "password",
            team: teamname,
            ssh_wrapper: File.join(WORKING_DIR, "#{username}-ssh-wrapper")
          }
          DEPLOY_CLIENT.deploy_app(
            user: user,
            app: {
              name: appname,
              dir: File.join(REPOS_DIR, "flask-sqlalchemy-postgres-heroku-example"),
              platform: "python"
            },
            postgres: servicename,
            git: true,
            units: UNITS_PER_APP
          )
        end
      end
    }
  end
end



